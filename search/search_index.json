{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview of BigBlueButton Exporter # BigBlueButton Exporter is a Prometheus exporter for BigBlueButton . On a HTTP /metrics request, the exporter will query the BigBlueButton's API for data which it then aggregates and exposes as metrics. Metrics exposed: Number of participants by type (listeners, voice, video) Number of participants by client (HTML5, dial-in, flash) Number of recordings (processing, published, unpublished, deleted, unprocessed) Number of participants in rooms by bucket Use Case # BigBlueButton Exporter is the bridge between BigBlueButton and modern monitoring infrastructure such as Prometheus, Alertmanager & Grafana. Using BigBlueButton Exporter you can create stunning dashboards for your BigBlueButton infrastructure and create alert rules when certain things happen. Multiple BigBlueButton servers dashboard # With this dashboard you have a quick overlook over all your BigBlueButton servers and quickly spot anomalies. Single detailed BigBlueButton server dashboard: # This dashboard gives you details about a single BigBlueButton server and it's performance compared to it's resources (CPU utilization and network bandwidth). Note Additional software is required to display server resources i.e. node_exporter or Netdata. We cover this in the installation instructions.","title":"Overview"},{"location":"#overview-of-bigbluebutton-exporter","text":"BigBlueButton Exporter is a Prometheus exporter for BigBlueButton . On a HTTP /metrics request, the exporter will query the BigBlueButton's API for data which it then aggregates and exposes as metrics. Metrics exposed: Number of participants by type (listeners, voice, video) Number of participants by client (HTML5, dial-in, flash) Number of recordings (processing, published, unpublished, deleted, unprocessed) Number of participants in rooms by bucket","title":"Overview of BigBlueButton Exporter"},{"location":"#use-case","text":"BigBlueButton Exporter is the bridge between BigBlueButton and modern monitoring infrastructure such as Prometheus, Alertmanager & Grafana. Using BigBlueButton Exporter you can create stunning dashboards for your BigBlueButton infrastructure and create alert rules when certain things happen.","title":"Use Case"},{"location":"#multiple-bigbluebutton-servers-dashboard","text":"With this dashboard you have a quick overlook over all your BigBlueButton servers and quickly spot anomalies.","title":"Multiple BigBlueButton servers dashboard"},{"location":"#single-detailed-bigbluebutton-server-dashboard","text":"This dashboard gives you details about a single BigBlueButton server and it's performance compared to it's resources (CPU utilization and network bandwidth). Note Additional software is required to display server resources i.e. node_exporter or Netdata. We cover this in the installation instructions.","title":"Single detailed BigBlueButton server dashboard:"},{"location":"debugging/","text":"Debugging # You might encounter some strange or unexpected metrics from your BigBlueButton server(s). In order to properly debug the issue it is crucial to figure out where the issue lies; in the monitoring infrastructure (BigBlueButton Exporter, Prometheus, Grafana, node_exporter, Netdata, etc.) or in the BigBlueButton infrastructure. Debugging Faulty Metrics # If you suspect there is an issue within BigBlueButton Exporter or the accompanied Grafana dashboards you can run the exporter in debug mode and view the XML API response the exporter fetches from BigBlueButton. If the \"faulty\" metric is contained within the XML API response then the issue lies with BigBlueButton, otherwise the issue lies within the monitoring stack (BigBlueButton Exporter, Prometheus, Grafana, node_exporter, Netdata, etc.). You can turn on debugging mode, as specified in the Exporter User Guide , by adding the environment variable DEBUG=true . This should spit out the XML API responses of all API queries to stdout. Debugging All-In-One Monitoring Stack # Check Logs # cd ~/bbb-monitoring sudo docker-compose logs bbb-exporter sudo docker-compose logs prometheus sudo docker-compose logs grafana sudo docker-compose logs node_exporter # or skip the service name to view logs for all containers sudo docker-compose logs Checking if Prometheus is Scraping Correctly # If you are not receiving any values in Grafana and the container logs do not give you any hints, it is a good idea to check if Prometheus is scraping any metrics. Since Prometheus is running on the host's network stack but binded to 127.0.0.1 we can use SSH to perform a local port forward. ssh -NL 9090 :127.0.0.1:9090 <HOST> Now visit http://localhost:9090 on your local machine and the Prometheus web interface should appear. Under Status select Targets . Here the bbb_node_exporter target should be up . If the target is down then there is a scraping issue, if it is up then the issue is on the Grafana -> Prometheus side.","title":"Debugging"},{"location":"debugging/#debugging","text":"You might encounter some strange or unexpected metrics from your BigBlueButton server(s). In order to properly debug the issue it is crucial to figure out where the issue lies; in the monitoring infrastructure (BigBlueButton Exporter, Prometheus, Grafana, node_exporter, Netdata, etc.) or in the BigBlueButton infrastructure.","title":"Debugging"},{"location":"debugging/#debugging-faulty-metrics","text":"If you suspect there is an issue within BigBlueButton Exporter or the accompanied Grafana dashboards you can run the exporter in debug mode and view the XML API response the exporter fetches from BigBlueButton. If the \"faulty\" metric is contained within the XML API response then the issue lies with BigBlueButton, otherwise the issue lies within the monitoring stack (BigBlueButton Exporter, Prometheus, Grafana, node_exporter, Netdata, etc.). You can turn on debugging mode, as specified in the Exporter User Guide , by adding the environment variable DEBUG=true . This should spit out the XML API responses of all API queries to stdout.","title":"Debugging Faulty Metrics"},{"location":"debugging/#debugging-all-in-one-monitoring-stack","text":"","title":"Debugging All-In-One Monitoring Stack"},{"location":"debugging/#check-logs","text":"cd ~/bbb-monitoring sudo docker-compose logs bbb-exporter sudo docker-compose logs prometheus sudo docker-compose logs grafana sudo docker-compose logs node_exporter # or skip the service name to view logs for all containers sudo docker-compose logs","title":"Check Logs"},{"location":"debugging/#checking-if-prometheus-is-scraping-correctly","text":"If you are not receiving any values in Grafana and the container logs do not give you any hints, it is a good idea to check if Prometheus is scraping any metrics. Since Prometheus is running on the host's network stack but binded to 127.0.0.1 we can use SSH to perform a local port forward. ssh -NL 9090 :127.0.0.1:9090 <HOST> Now visit http://localhost:9090 on your local machine and the Prometheus web interface should appear. Under Status select Targets . Here the bbb_node_exporter target should be up . If the target is down then there is a scraping issue, if it is up then the issue is on the Grafana -> Prometheus side.","title":"Checking if Prometheus is Scraping Correctly"},{"location":"development/","text":"Development # Building the Website # Requirements # make mkdocs mkdocs-material (pip install mkdocs-material) pip install mkdocs mkdocs-material make docs-dev","title":"Development"},{"location":"development/#development","text":"","title":"Development"},{"location":"development/#building-the-website","text":"","title":"Building the Website"},{"location":"development/#requirements","text":"make mkdocs mkdocs-material (pip install mkdocs-material) pip install mkdocs mkdocs-material make docs-dev","title":"Requirements"},{"location":"exporter-user-guide/","text":"Exporter User Guide # Environment Variables # API_SECRET - BigBlueButton API Secret Required: true Use $ bbb-conf --secret on BigBlueButton server to get secret and Base API url API_BASE_URL - BigBlueButton API base URL Required: true Example: \"https://example.com/bigbluebutton/api/\" Trailing slash is required! Make sure you supply the base url of the API , often this URL ends in /api/ DEBUG - Enable debug logging Required: false Default: false Values: <true | false> RECORDINGS_METRICS - Enable collection of recordings metrics Required: false Default: true Values: <true | false> BIND_IP - Which network address to bind the HTTP server of the exporter Required: false Default: 0.0.0.0 PORT - HTTP port to serve the exporter metrics Required: false Default: 9688 Values: <1 - 65535> TLS_VERIFY - Enable (default) / disable TLS CA verification or replace with a custom CA_BUNDLE directory or file Required: false Default: true Values: <true | false | path to CA_BUNDLE directory or file > A CA_BUNDLE file is normal file that contains a list of CA certificates you trust. See FAQ or the under the hood library documentation for details. Optimizations # RECORDINGS_METRICS_READ_FROM_DISK - Collect expensive recordings metrics by querying the disk instead of the API. This can substantially decrease the scrape time required for the exporter to respond to metrics requests. Required: false Default: false Values: <true | false> Prerequisites: access to /var/bigbluebutton (for Docker containers do a read-only bind mount) so running the exporter remotely with this option is not possible (unless you setup a remote file mount). The metric bbb_recordings_unprocessed relies on the optimization to be turned on since the information is not exposed via the BigBlueButton XML API Metric Histogram Custom Buckets # ROOM_PARTICIPANTS_CUSTOM_BUCKETS - Custom bucket sizes for the bbb_room_participants_bucket histogram metric Required: false Default: 0,1,5,15,30,60,90,120,150,200,250,300,400,500 INF will be added automatically as the final bucket size Values: list of integers separated using comma ( , ) ROOM_LISTENERS_CUSTOM_BUCKETS - Custom bucket sizes for the bbb_room_listeners_bucket histogram metric Required: false Default: 0,1,5,15,30,60,90,120,150,200,250,300,400,500 INF will be added automatically as the final bucket size Values: list of integers separated using comma ( , ) ROOM_VOICE_PARTICIPANTS_CUSTOM_BUCKETS - Custom bucket sizes for the bbb_room_voice_participants_bucket histogram metric Required: false Default: 0,1,5,15,30,60,90,120 INF will be added automatically as the final bucket size Values: list of integers separated using comma ( , ) ROOM_VIDEO_PARTICIPANTS_CUSTOM_BUCKETS - Custom bucket sizes for the bbb_room_video_participants_bucket histogram metric Required: false Default: 0,1,5,15,30,60,90,120 INF will be added automatically as the final bucket size Values: list of integers separated using comma ( , ) Metrics # Gauges # bbb_meetings_participants - Total number of participants in all BigBlueButton meetings bbb_meetings_listeners - Total number of listeners in all BigBlueButton meetings bbb_meetings_voice_participants - Total number of voice participants in all BigBlueButton meetings bbb_meetings_video_participants - Total number of video participants in all BigBlueButton meetings bbb_meetings_participant_clients(type=<client>) - Total number of participants in all BigBlueButton meetings by client (html5|dial-in|flash) bbb_recordings_processing - Total number of BigBlueButton recordings processing bbb_recordings_published - Total number of BigBlueButton recordings published bbb_recordings_unpublished - Total number of BigBlueButton recordings unpublished bbb_recordings_deleted - Total number of BigBlueButton recordings deleted bbb_recordings_unprocessed - Total number of BigBlueButton recordings that are enqueued to be processed, requires for the exporter to be installed on the BigBlueButton server (access to /var/bigbluebutton/ dir) and for RECORDINGS_METRICS_READ_FROM_DISK to be enabled bbb_api_up - 1 if BigBlueButton API is responding 0 otherwise bbb_exporter(labels: version) - Information about the exporter (i.e. version) Histograms # bbb_api_latency(labels: endpoint, parameters) - BigBlueButton API call latency buckets: .01, .025, .05, .075, .1, .25, .5, .75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.5, 5.0, 7.5, 10.0, INF bbb_room_participants_bucket - Number of rooms with participants less than or equal to the bucket size buckets: 0, 1, 5, 15, 30, 60, 90, 120, 150, 200, 250, 300, 400, 500, INF bucket sizes can be overridden using ROOM_PARTICIPANTS_CUSTOM_BUCKETS , see environment variables - metric-histogram-custom-buckets for details bbb_room_listeners_bucket - Number of rooms with listeners less than or equal to the bucket size buckets: 0, 1, 5, 15, 30, 60, 90, 120, 150, 200, 250, 300, 400, 500, INF bucket sizes can be overridden using ROOM_LISTENERS_CUSTOM_BUCKETS , see environment variables - metric-histogram-custom-buckets for details bbb_room_voice_participants_bucket - Number of rooms with voice participants less than or equal to the bucket size buckets: 0, 1, 5, 15, 30, 60, 90, 120, INF bucket sizes can be overridden using ROOM_VOICE_PARTICIPANTS_CUSTOM_BUCKETS , see environment variables - metric-histogram-custom-buckets for details bbb_room_video_participants_bucket - Number of rooms with video participants less than or equal to the bucket size buckets: 0, 1, 5, 15, 30, 60, 90, 120, INF bucket sizes can be overridden using ROOM_VIDEO_PARTICIPANTS_CUSTOM_BUCKETS , see environment variables - metric-histogram-custom-buckets for details","title":"Exporter User Guide"},{"location":"exporter-user-guide/#exporter-user-guide","text":"","title":"Exporter User Guide"},{"location":"exporter-user-guide/#environment-variables","text":"API_SECRET - BigBlueButton API Secret Required: true Use $ bbb-conf --secret on BigBlueButton server to get secret and Base API url API_BASE_URL - BigBlueButton API base URL Required: true Example: \"https://example.com/bigbluebutton/api/\" Trailing slash is required! Make sure you supply the base url of the API , often this URL ends in /api/ DEBUG - Enable debug logging Required: false Default: false Values: <true | false> RECORDINGS_METRICS - Enable collection of recordings metrics Required: false Default: true Values: <true | false> BIND_IP - Which network address to bind the HTTP server of the exporter Required: false Default: 0.0.0.0 PORT - HTTP port to serve the exporter metrics Required: false Default: 9688 Values: <1 - 65535> TLS_VERIFY - Enable (default) / disable TLS CA verification or replace with a custom CA_BUNDLE directory or file Required: false Default: true Values: <true | false | path to CA_BUNDLE directory or file > A CA_BUNDLE file is normal file that contains a list of CA certificates you trust. See FAQ or the under the hood library documentation for details.","title":"Environment Variables"},{"location":"exporter-user-guide/#optimizations","text":"RECORDINGS_METRICS_READ_FROM_DISK - Collect expensive recordings metrics by querying the disk instead of the API. This can substantially decrease the scrape time required for the exporter to respond to metrics requests. Required: false Default: false Values: <true | false> Prerequisites: access to /var/bigbluebutton (for Docker containers do a read-only bind mount) so running the exporter remotely with this option is not possible (unless you setup a remote file mount). The metric bbb_recordings_unprocessed relies on the optimization to be turned on since the information is not exposed via the BigBlueButton XML API","title":"Optimizations"},{"location":"exporter-user-guide/#metric-histogram-custom-buckets","text":"ROOM_PARTICIPANTS_CUSTOM_BUCKETS - Custom bucket sizes for the bbb_room_participants_bucket histogram metric Required: false Default: 0,1,5,15,30,60,90,120,150,200,250,300,400,500 INF will be added automatically as the final bucket size Values: list of integers separated using comma ( , ) ROOM_LISTENERS_CUSTOM_BUCKETS - Custom bucket sizes for the bbb_room_listeners_bucket histogram metric Required: false Default: 0,1,5,15,30,60,90,120,150,200,250,300,400,500 INF will be added automatically as the final bucket size Values: list of integers separated using comma ( , ) ROOM_VOICE_PARTICIPANTS_CUSTOM_BUCKETS - Custom bucket sizes for the bbb_room_voice_participants_bucket histogram metric Required: false Default: 0,1,5,15,30,60,90,120 INF will be added automatically as the final bucket size Values: list of integers separated using comma ( , ) ROOM_VIDEO_PARTICIPANTS_CUSTOM_BUCKETS - Custom bucket sizes for the bbb_room_video_participants_bucket histogram metric Required: false Default: 0,1,5,15,30,60,90,120 INF will be added automatically as the final bucket size Values: list of integers separated using comma ( , )","title":"Metric Histogram Custom Buckets"},{"location":"exporter-user-guide/#metrics","text":"","title":"Metrics"},{"location":"exporter-user-guide/#gauges","text":"bbb_meetings_participants - Total number of participants in all BigBlueButton meetings bbb_meetings_listeners - Total number of listeners in all BigBlueButton meetings bbb_meetings_voice_participants - Total number of voice participants in all BigBlueButton meetings bbb_meetings_video_participants - Total number of video participants in all BigBlueButton meetings bbb_meetings_participant_clients(type=<client>) - Total number of participants in all BigBlueButton meetings by client (html5|dial-in|flash) bbb_recordings_processing - Total number of BigBlueButton recordings processing bbb_recordings_published - Total number of BigBlueButton recordings published bbb_recordings_unpublished - Total number of BigBlueButton recordings unpublished bbb_recordings_deleted - Total number of BigBlueButton recordings deleted bbb_recordings_unprocessed - Total number of BigBlueButton recordings that are enqueued to be processed, requires for the exporter to be installed on the BigBlueButton server (access to /var/bigbluebutton/ dir) and for RECORDINGS_METRICS_READ_FROM_DISK to be enabled bbb_api_up - 1 if BigBlueButton API is responding 0 otherwise bbb_exporter(labels: version) - Information about the exporter (i.e. version)","title":"Gauges"},{"location":"exporter-user-guide/#histograms","text":"bbb_api_latency(labels: endpoint, parameters) - BigBlueButton API call latency buckets: .01, .025, .05, .075, .1, .25, .5, .75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.5, 5.0, 7.5, 10.0, INF bbb_room_participants_bucket - Number of rooms with participants less than or equal to the bucket size buckets: 0, 1, 5, 15, 30, 60, 90, 120, 150, 200, 250, 300, 400, 500, INF bucket sizes can be overridden using ROOM_PARTICIPANTS_CUSTOM_BUCKETS , see environment variables - metric-histogram-custom-buckets for details bbb_room_listeners_bucket - Number of rooms with listeners less than or equal to the bucket size buckets: 0, 1, 5, 15, 30, 60, 90, 120, 150, 200, 250, 300, 400, 500, INF bucket sizes can be overridden using ROOM_LISTENERS_CUSTOM_BUCKETS , see environment variables - metric-histogram-custom-buckets for details bbb_room_voice_participants_bucket - Number of rooms with voice participants less than or equal to the bucket size buckets: 0, 1, 5, 15, 30, 60, 90, 120, INF bucket sizes can be overridden using ROOM_VOICE_PARTICIPANTS_CUSTOM_BUCKETS , see environment variables - metric-histogram-custom-buckets for details bbb_room_video_participants_bucket - Number of rooms with video participants less than or equal to the bucket size buckets: 0, 1, 5, 15, 30, 60, 90, 120, INF bucket sizes can be overridden using ROOM_VIDEO_PARTICIPANTS_CUSTOM_BUCKETS , see environment variables - metric-histogram-custom-buckets for details","title":"Histograms"},{"location":"faq/","text":"FAQ # Scalelite Support # BigBlueButton Exporter can be used alongside Scalelite. In fact the exporter doesn't need to know anything about Scalelite (or Scalelite about the exporter) since the exporter still needs to be configured to scrape metrics from the BigBlueButton server's API. See comment in Issue #31 . My CA_BUNDLE for the TLS_VERIFY environment variable is not working # If you will specify the directory flavor , make sure the directory is filled with public keys of your trusted CA in PEM format. If you will specify the file flavor (e.g. TLS_VERIFY=/app/CA_BUNDLE.txt ), make sure the file contains an appended list of all your trusted PEM formatted CA's. Non-working example to denote the format: -----BEGIN CERTIFICATE----- ... // PEM formated CA -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- ... // PEM formated CA -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- ... // PEM formated CA -----END CERTIFICATE----- All in One Monitoring Stack BrokenPipeError # If you get a BrokenPipeError exception similar to: bbb - exporter | ---------------------------------------- bbb - exporter | 2020 - 07 - 09 01 : 38 : 25 , 635 [ INFO ] : Collecting metrics from BigBlueButton API bbb - exporter | 2020 - 07 - 09 01 : 38 : 32 , 497 [ INFO ] : Finished collecting metrics from BigBlueButton API bbb - exporter | ---------------------------------------- bbb - exporter | Exception happened during processing of request from ( '127.0.0.1' , 48190 ) bbb - exporter | Traceback ( most recent call last ) : bbb - exporter | File \"/usr/local/lib/python3.7/socketserver.py\" , line 650 , in process_request_thread bbb - exporter | self . finish_request ( request , client_address ) bbb - exporter | File \"/usr/local/lib/python3.7/socketserver.py\" , line 360 , in finish_request bbb - exporter | self . RequestHandlerClass ( request , client_address , self ) bbb - exporter | File \"/usr/local/lib/python3.7/socketserver.py\" , line 720 , in init bbb - exporter | self . handle () bbb - exporter | File \"/usr/local/lib/python3.7/http/server.py\" , line 426 , in handle bbb - exporter | self . handle_one_request () bbb - exporter | File \"/usr/local/lib/python3.7/http/server.py\" , line 414 , in handle_one_request bbb - exporter | method () bbb - exporter | File \"/usr/local/lib/python3.7/site-packages/prometheus_client/exposition.py\" , line 159 , in do_GET bbb - exporter | self . wfile . write ( output ) bbb - exporter | File \"/usr/local/lib/python3.7/socketserver.py\" , line 799 , in write bbb - exporter | self . _sock . sendall ( b ) bbb - exporter | BrokenPipeError : [ Errno 32 ] Broken pipe This is caused by Prometheus closing the metrics scrapping HTTP request to the exporter because the request duration exceeds the Prometheus defined scrape_timeout value. The Prometheus config ( prometheus.yaml ) file bundled with the All in One Monitoring Stack has the default scrape_timeout set to 15 seconds. The recommended way of fixing this is to enable the RECORDINGS_METRICS_READ_FROM_DISK optimization which should dramatically reduce scraping times. You could also override the scrape_timeout value for the bbb_exporter job but this should be only done in cases where enabling the RECORDINGS_METRICS_READ_FROM_DISK optimization is unfeasible.","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#scalelite-support","text":"BigBlueButton Exporter can be used alongside Scalelite. In fact the exporter doesn't need to know anything about Scalelite (or Scalelite about the exporter) since the exporter still needs to be configured to scrape metrics from the BigBlueButton server's API. See comment in Issue #31 .","title":"Scalelite Support"},{"location":"faq/#my-ca_bundle-for-the-tls_verify-environment-variable-is-not-working","text":"If you will specify the directory flavor , make sure the directory is filled with public keys of your trusted CA in PEM format. If you will specify the file flavor (e.g. TLS_VERIFY=/app/CA_BUNDLE.txt ), make sure the file contains an appended list of all your trusted PEM formatted CA's. Non-working example to denote the format: -----BEGIN CERTIFICATE----- ... // PEM formated CA -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- ... // PEM formated CA -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- ... // PEM formated CA -----END CERTIFICATE-----","title":"My CA_BUNDLE for the TLS_VERIFY environment variable is not working"},{"location":"faq/#all-in-one-monitoring-stack-brokenpipeerror","text":"If you get a BrokenPipeError exception similar to: bbb - exporter | ---------------------------------------- bbb - exporter | 2020 - 07 - 09 01 : 38 : 25 , 635 [ INFO ] : Collecting metrics from BigBlueButton API bbb - exporter | 2020 - 07 - 09 01 : 38 : 32 , 497 [ INFO ] : Finished collecting metrics from BigBlueButton API bbb - exporter | ---------------------------------------- bbb - exporter | Exception happened during processing of request from ( '127.0.0.1' , 48190 ) bbb - exporter | Traceback ( most recent call last ) : bbb - exporter | File \"/usr/local/lib/python3.7/socketserver.py\" , line 650 , in process_request_thread bbb - exporter | self . finish_request ( request , client_address ) bbb - exporter | File \"/usr/local/lib/python3.7/socketserver.py\" , line 360 , in finish_request bbb - exporter | self . RequestHandlerClass ( request , client_address , self ) bbb - exporter | File \"/usr/local/lib/python3.7/socketserver.py\" , line 720 , in init bbb - exporter | self . handle () bbb - exporter | File \"/usr/local/lib/python3.7/http/server.py\" , line 426 , in handle bbb - exporter | self . handle_one_request () bbb - exporter | File \"/usr/local/lib/python3.7/http/server.py\" , line 414 , in handle_one_request bbb - exporter | method () bbb - exporter | File \"/usr/local/lib/python3.7/site-packages/prometheus_client/exposition.py\" , line 159 , in do_GET bbb - exporter | self . wfile . write ( output ) bbb - exporter | File \"/usr/local/lib/python3.7/socketserver.py\" , line 799 , in write bbb - exporter | self . _sock . sendall ( b ) bbb - exporter | BrokenPipeError : [ Errno 32 ] Broken pipe This is caused by Prometheus closing the metrics scrapping HTTP request to the exporter because the request duration exceeds the Prometheus defined scrape_timeout value. The Prometheus config ( prometheus.yaml ) file bundled with the All in One Monitoring Stack has the default scrape_timeout set to 15 seconds. The recommended way of fixing this is to enable the RECORDINGS_METRICS_READ_FROM_DISK optimization which should dramatically reduce scraping times. You could also override the scrape_timeout value for the bbb_exporter job but this should be only done in cases where enabling the RECORDINGS_METRICS_READ_FROM_DISK optimization is unfeasible.","title":"All in One Monitoring Stack BrokenPipeError"},{"location":"getting-started/","text":"Getting Started # First you will need to choose your installation configuration. Installation Type Matrix # Recommended installation type Number of BBB servers Existing Prometheus & Grafana services Do you like Docker? Docker installation (recommended) multiple \u2705 \u2705 All-In-One Monitoring Stack installation 1 \u274c \u2705 Systemd installation (not recommended) multiple \u2705 \u274c If you choose the Docker or Systemd installation type you will have the choice of choosing between node_exporter (recommended) and Netdata for server resource utilization metrics. The metrics that will be collected from one of these two tools will be used together with BigBlueButton exporter metrics in the Server Instance Grafana dashboards. node_exporter installation instructions Netdata installation instructions Grafana Dashboards # Once you have the BigBlueButton exporter installed and one of the two resource utilization metric exporters (node_exporter or Netdata), you can import the appropriate Grafana dashboards. Note We assume a working Grafana-Prometheus installation. If you used the All-In-One Monitoring Stack installation type you are covered since Grafana, Prometheus and node_exporter come preconfigured. Login to Grafana and in the left menu click on + icon -> import In the JSON field copy/paste the contents of your desired dashboard Dashboard Prerequisites Short description All Servers dashboard BigBlueButton Exporter BBB metrics for all servers in one dashboard Server Instance (node_exporter) dashboard BigBlueButton Exporter, node_exporter BBB server details combined with node_exporter resource metrics Server Instance (netdata) dashboard BigBlueButton Exporter, Netdata BBB server details combined with Netdata resource metrics Installing Grafana on the BigBlueButton Server # If you plan to install Grafana on the BigBlueButton host itself, keep in mind that the standard port for Grafana (3000) is also used by the html5-client of BigBlueButton (see /etc/bigbluebutton/nginx/bbb-html5.nginx ). In this case you will need to change the Grafana port in /etc/grafana/grafana.ini to something else, e.g. 3001).","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"First you will need to choose your installation configuration.","title":"Getting Started"},{"location":"getting-started/#installation-type-matrix","text":"Recommended installation type Number of BBB servers Existing Prometheus & Grafana services Do you like Docker? Docker installation (recommended) multiple \u2705 \u2705 All-In-One Monitoring Stack installation 1 \u274c \u2705 Systemd installation (not recommended) multiple \u2705 \u274c If you choose the Docker or Systemd installation type you will have the choice of choosing between node_exporter (recommended) and Netdata for server resource utilization metrics. The metrics that will be collected from one of these two tools will be used together with BigBlueButton exporter metrics in the Server Instance Grafana dashboards. node_exporter installation instructions Netdata installation instructions","title":"Installation Type Matrix"},{"location":"getting-started/#grafana-dashboards","text":"Once you have the BigBlueButton exporter installed and one of the two resource utilization metric exporters (node_exporter or Netdata), you can import the appropriate Grafana dashboards. Note We assume a working Grafana-Prometheus installation. If you used the All-In-One Monitoring Stack installation type you are covered since Grafana, Prometheus and node_exporter come preconfigured. Login to Grafana and in the left menu click on + icon -> import In the JSON field copy/paste the contents of your desired dashboard Dashboard Prerequisites Short description All Servers dashboard BigBlueButton Exporter BBB metrics for all servers in one dashboard Server Instance (node_exporter) dashboard BigBlueButton Exporter, node_exporter BBB server details combined with node_exporter resource metrics Server Instance (netdata) dashboard BigBlueButton Exporter, Netdata BBB server details combined with Netdata resource metrics","title":"Grafana Dashboards"},{"location":"getting-started/#installing-grafana-on-the-bigbluebutton-server","text":"If you plan to install Grafana on the BigBlueButton host itself, keep in mind that the standard port for Grafana (3000) is also used by the html5-client of BigBlueButton (see /etc/bigbluebutton/nginx/bbb-html5.nginx ). In this case you will need to change the Grafana port in /etc/grafana/grafana.ini to something else, e.g. 3001).","title":"Installing Grafana on the BigBlueButton Server"},{"location":"support/","text":"Support # Read Installation instructions and the Getting Started guide Check the debugging instructions Check the FAQ Open an issue on the project's GitHub repository","title":"Support"},{"location":"support/#support","text":"Read Installation instructions and the Getting Started guide Check the debugging instructions Check the FAQ Open an issue on the project's GitHub repository","title":"Support"},{"location":"installation/all_in_one_monitoring_stack/","text":"All-In-One Monitoring Stack # If you do not have any monitoring infrastructure setup you can following these instructions to setup the entire monitoring stack on your BigBlueButton server. Monitoring Stack: BigBlueButton exporter Prometheus (incl. node_exporter) Grafana Grafana will be exposed through the system installed Nginx which will act as a TLS termination proxy. Prerequisites: Docker (you probably have this on your BigBlueButton server) docker-compose (recent version with compose file format version 3.2 support) Nginx (that has TLS configured) Warning Follow Docker's official installation instructions instead of installing docker-compose from Ubuntu's official repository since it is outdated and does not support compose file format v3.2 (as of April 29, 2020). Step-by-step Guide # 1. Create directory # mkdir ~/bbb-monitoring 2. Copy configuration files # Copy all the files in extras/all_in_one_monitoring to your server into ~/bbb-monitoring And replace all the references to example.com with your BigBlueButton domain. Make sure to replace the exporters Docker image tag to the latest release . If you are not running on your BigBlueButton server, then you will need to disable the RECORDINGS_METRICS_READ_FROM_DISK optimization by removing it from the docker-compose file and the /var/bigbluebutton volume bind mount. This will have the unfortunate consequence of dramatically increasing scrape times when your BigBlueButton server will have many recordings. It is also smart to increase the scrape_timeout value when disabling the optimization, see All in One Monitoring Stack BrokenPipeError for details. Tip Docker best practice: pin your docker image to a specific tag to have a reproducible environment. This also makes it easier to check which version you are running and which is the latest release. Note You will configure https://example.com/monitoring in step 5: Configure Nginx . 3. Add your secrets # Get your BBB secret by running: bbb-conf --secret Then fill out API_BASE_URL and API_SECRET in ~/bbb-monitoring/bbb_exporter_secrets.env with your details. Warning The API base url ends with /api/ (beware of the trailing slash!). bbb-conf --secret will return the base url but not the base API url which has a /api/ appended. 4. Start the services # cd ~/bbb-monitoring sudo docker-compose up -d 5. Configure Nginx # Add the location directive to your Nginx web server ( /etc/nginx/sites-available/bigbluebutton ) that will proxy traffic to 127.0.0.1:3001 . # BigBlueButton monitoring location /monitoring/ { proxy_pass http://127.0.0.1:3001/; proxy_redirect default; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; client_max_body_size 10m; client_body_buffer_size 128k; proxy_connect_timeout 90; proxy_send_timeout 90; proxy_read_timeout 90; proxy_buffer_size 4k; proxy_buffers 4 32k; proxy_busy_buffers_size 64k; proxy_temp_file_write_size 64k; include fastcgi_params; } Note If you would like to change the URL you will need to update the docker-compose grafana GF_SERVER_ROOT_URL env variable as well. Tip When upgrading BigBlueButton, the upgrade procedure will overwrite the contents of /etc/nginx/sites-available/bigbluebutton thereby causing you to lose access to your metrics. So after the upgrade to BigBlueButton you will need to add the location directive again. You could also add a separate site configuration, but this will require you to point another domain to the server to do virtual hosting and acquire a separate HTTPS certificate. 6. Setup Grafana # Login to Grafana (https://example.com/monitoring) in your web browser (admin:admin) and change the password . Add Prometheus as a data source ( Add data source -> Prometheus ) and entering the following configuration: URL: http://localhost:9090 Note The prometheus DNS entry will be resolved by Docker since Grafana is running within the same Docker network (our docker-compose configuration automates this). Now it is time to finally import the fancy dashboards. In the left menu click on + icon -> import In the JSON field copy/paste the contents of extras/dashboards/server_instance_node_exporter.json Grafana dashboard. You are done \ud83d\udc4f\ud83d\udc4f! Warning You can edit your dashboard as much as you like, but note that you will lose your changes if you will re-import updated versions of the dashboard. So you will have to manually patch the dashboard when we update the dashboard json files in the repository. Updates # Follow Installation of BigBlueButton Exporter -> Updates but instead of cd ~/bbb-exporter you will have to cd ~/bbb-monitoring . Check the releases for the rest of the services (Prometheus, Grafana & node_exporter) on their respected websites for details on the latest Docker image release tag.","title":"All-In-One Monitoring Stack"},{"location":"installation/all_in_one_monitoring_stack/#all-in-one-monitoring-stack","text":"If you do not have any monitoring infrastructure setup you can following these instructions to setup the entire monitoring stack on your BigBlueButton server. Monitoring Stack: BigBlueButton exporter Prometheus (incl. node_exporter) Grafana Grafana will be exposed through the system installed Nginx which will act as a TLS termination proxy. Prerequisites: Docker (you probably have this on your BigBlueButton server) docker-compose (recent version with compose file format version 3.2 support) Nginx (that has TLS configured) Warning Follow Docker's official installation instructions instead of installing docker-compose from Ubuntu's official repository since it is outdated and does not support compose file format v3.2 (as of April 29, 2020).","title":"All-In-One Monitoring Stack"},{"location":"installation/all_in_one_monitoring_stack/#step-by-step-guide","text":"","title":"Step-by-step Guide"},{"location":"installation/all_in_one_monitoring_stack/#1-create-directory","text":"mkdir ~/bbb-monitoring","title":"1. Create directory"},{"location":"installation/all_in_one_monitoring_stack/#2-copy-configuration-files","text":"Copy all the files in extras/all_in_one_monitoring to your server into ~/bbb-monitoring And replace all the references to example.com with your BigBlueButton domain. Make sure to replace the exporters Docker image tag to the latest release . If you are not running on your BigBlueButton server, then you will need to disable the RECORDINGS_METRICS_READ_FROM_DISK optimization by removing it from the docker-compose file and the /var/bigbluebutton volume bind mount. This will have the unfortunate consequence of dramatically increasing scrape times when your BigBlueButton server will have many recordings. It is also smart to increase the scrape_timeout value when disabling the optimization, see All in One Monitoring Stack BrokenPipeError for details. Tip Docker best practice: pin your docker image to a specific tag to have a reproducible environment. This also makes it easier to check which version you are running and which is the latest release. Note You will configure https://example.com/monitoring in step 5: Configure Nginx .","title":"2. Copy configuration files"},{"location":"installation/all_in_one_monitoring_stack/#3-add-your-secrets","text":"Get your BBB secret by running: bbb-conf --secret Then fill out API_BASE_URL and API_SECRET in ~/bbb-monitoring/bbb_exporter_secrets.env with your details. Warning The API base url ends with /api/ (beware of the trailing slash!). bbb-conf --secret will return the base url but not the base API url which has a /api/ appended.","title":"3. Add your secrets"},{"location":"installation/all_in_one_monitoring_stack/#4-start-the-services","text":"cd ~/bbb-monitoring sudo docker-compose up -d","title":"4. Start the services"},{"location":"installation/all_in_one_monitoring_stack/#5-configure-nginx","text":"Add the location directive to your Nginx web server ( /etc/nginx/sites-available/bigbluebutton ) that will proxy traffic to 127.0.0.1:3001 . # BigBlueButton monitoring location /monitoring/ { proxy_pass http://127.0.0.1:3001/; proxy_redirect default; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; client_max_body_size 10m; client_body_buffer_size 128k; proxy_connect_timeout 90; proxy_send_timeout 90; proxy_read_timeout 90; proxy_buffer_size 4k; proxy_buffers 4 32k; proxy_busy_buffers_size 64k; proxy_temp_file_write_size 64k; include fastcgi_params; } Note If you would like to change the URL you will need to update the docker-compose grafana GF_SERVER_ROOT_URL env variable as well. Tip When upgrading BigBlueButton, the upgrade procedure will overwrite the contents of /etc/nginx/sites-available/bigbluebutton thereby causing you to lose access to your metrics. So after the upgrade to BigBlueButton you will need to add the location directive again. You could also add a separate site configuration, but this will require you to point another domain to the server to do virtual hosting and acquire a separate HTTPS certificate.","title":"5. Configure Nginx"},{"location":"installation/all_in_one_monitoring_stack/#6-setup-grafana","text":"Login to Grafana (https://example.com/monitoring) in your web browser (admin:admin) and change the password . Add Prometheus as a data source ( Add data source -> Prometheus ) and entering the following configuration: URL: http://localhost:9090 Note The prometheus DNS entry will be resolved by Docker since Grafana is running within the same Docker network (our docker-compose configuration automates this). Now it is time to finally import the fancy dashboards. In the left menu click on + icon -> import In the JSON field copy/paste the contents of extras/dashboards/server_instance_node_exporter.json Grafana dashboard. You are done \ud83d\udc4f\ud83d\udc4f! Warning You can edit your dashboard as much as you like, but note that you will lose your changes if you will re-import updated versions of the dashboard. So you will have to manually patch the dashboard when we update the dashboard json files in the repository.","title":"6. Setup Grafana"},{"location":"installation/all_in_one_monitoring_stack/#updates","text":"Follow Installation of BigBlueButton Exporter -> Updates but instead of cd ~/bbb-exporter you will have to cd ~/bbb-monitoring . Check the releases for the rest of the services (Prometheus, Grafana & node_exporter) on their respected websites for details on the latest Docker image release tag.","title":"Updates"},{"location":"installation/bigbluebutton_exporter/","text":"Installation of BigBlueButton Exporter # Two installation methods are supported: Docker (recommended) Systemd (not recommended) We recommend Docker because it is easier to update, reproduce builds and comes with all dependencies pre-installed. Docker Installation (Recommended) # These instructions will guide you through the installation procedure for BigBlueButton Exporter on your BigBlueButton server and direct the HTTP basic auth protected endpoint /metrics/ to expose your BigBlueButtons server's metrics. We assume you have a working installation of BigBlueButton with Nginx as the reverse proxy already set up. Info HTTP Basic Auth is required because each request to the /metrics/ endpoint performs an API call to BigBlueButton which takes a couple of seconds. Prerequisite: Prometheus Docker docker-compose Working BigBlueButton server 1. Create directory # mkdir ~/bbb-exporter 2. Create docker-compose file # Copy extras/docker-compose.exporter.yaml to your BigBlueButton server into ~/bbb-exporter/docker-compose.yaml . Make sure to replace the Docker image tag to the latest release . Note We assume you will be running the exporter on the BigBlueButton server where you have access to the recordings directory ( /var/bigbluebutton ). We need access to this directory so we can efficiently compute the metrics for recordings. You can still run the exporter on a different host by disabling the optimization but will lose certain metrics and increase scrape times. See details regarding the optimization . Tip Docker best practice: pin your docker image to a specific tag to have a reproducible environment. This also makes it easier to check which version you are running and which is the latest release. 3. Create secrets file # Take a note of your BigBlueButton's API base url and secret by running: bbb-conf --secret Then create the file ~/bbb-exporter/secrets.env and fill out the API_BASE_URL and API_SECRET variables with your details. API_BASE_URL=https://example.com/bigbluebutton/api/ API_SECRET=<secret> Warning The API base url ends with /api/ (beware of the trailing slash!). bbb-conf --secret will return the base url but not the base API url which has a /api/ appended. 4. Start the container # sudo docker-compose up -d The exporter should be running now. However you will not be able to access it externally because the docker-compose file binded the exporters port only to localhost. This is because we will use Nginx to act as a TLS termination proxy (reverse proxy with HTTPS support) 5. Create HTTP basic auth password # Info For this you will need the handy apache2-utils package to create a password that will be used with HTTP basic auth by Nginx. You can install it (on Ubuntu) by running: sudo apt-get install apache2-utils . Create a username (e.g. metrics) and password. You will be prompted after you run the htpasswd command for the desired password. # You may replace metrics with any desired username sudo htpasswd -c /etc/nginx/.htpasswd metrics Warning If you already have /etc/nginx/.htpasswd file then do not add the -c flag, otherwise you will overwrite the file. 6. Add Nginx site configuration # Add the location directive to your Nginx web server ( /etc/nginx/sites-available/bigbluebutton ) that will proxy traffic to 127.0.0.1:9688 . # BigBlueButton Exporter (metrics) location /metrics/ { auth_basic \"BigBlueButton Exporter\"; auth_basic_user_file /etc/nginx/.htpasswd; proxy_pass http://127.0.0.1:9688/; include proxy_params; } Tip When upgrading BigBlueButton (using the script), the upgrade procedure will overwrite the contents of /etc/nginx/sites-available/bigbluebutton thereby causing you to lose access to your metrics. So after the upgrade you will need to add the location directive again. You could also add a separate site configuration, but this will require you to point another domain to the server, configure virtual hosting and acquire a separate HTTPS certificate. 7. Reload Nginx and test # First check if your Nginx configuration is syntactically valid: sudo nginx -t If everything is okay reload Nginx: sudo systemctl reload nginx Now you can try accessing the metrics on /metrics and typing in your username/password that you choose in 5. Create HTTP basic auth password You should get the raw metrics in the Prometheus format. 8. Add the exporter to your Prometheus configuration # Now all that is left is to point your Prometheus to the exporter. In your prometheus.yaml configuration add a new job specifying the target (url of the exporter) and HTTP basic auth credentials. Replace example.com with your BigBlueButton's domain. - job_name: 'bbb' scrape_interval: 5s scheme: https basic_auth: username: \"<HTTP BASIC AUTH USERNAME>\" password: \"<HTTP BASIC AUTH PASSWORD>\" static_configs: - targets: ['example.com'] Tip You can scrape multiple exporters using a single job rule if they all have the same HTTP basic auth username/password in the Nginx termination proxy. See Multiple BigBlueButton Servers for details. Updates # To update your BigBlueButton exporter all you have to do is change the docker image tag to the latest release (see releases or Docker image tags ) in ~/bbb-exporter/docker-compose.yaml and re-create the docker container by running: cd ~/bbb-exporter docker-compose up -d Since the container doesn't store anything it is safe to destroy the container. We recommend you \"watch\" on GitHub the projects repository to be notified on new releases. This way you will be always notified when a new update for BigBlueButton Exporter is available. Systemd Installation (Not recommended) # This is an alternative installation guide that does not require docker and installs the exporter as a Systemd unit. After the guide you will have: BigBlueButton Exporter installed system wide and you will be able to use systemctl to start/stop/restart the exporter Nginx as a TLS termination proxy for the exporter Installation should be on the BigBlueButton server, although it is possible to install it on a secondary machine, but this will require you to install Nginx and set it up by yourself. 1. Install Python 3 pip # sudo apt install python3-pip 2. Download the source code and install dependencies # cd /opt sudo git clone https://github.com/greenstatic/bigbluebutton-exporter.git cd bigbluebutton-exporter/ # It is recommended to checkout a release tag instead of using the master branch. # We recommend selecting the latest release tag from: # https://github.com/greenstatic/bigbluebutton-exporter/releases sudo git checkout <RELEASE TAG> sudo pip3 install -r requirements.txt # will install the Python dependencies system-wide 3. Create a non-privileged user for the exporter # sudo useradd -r -d /opt/bigbluebutton-exporter -s /usr/sbin/nologin bbb-exporter sudo chown -R bbb-exporter:bbb-exporter /opt/bigbluebutton-exporter 4. Copy Systemd unit service and example settings # sudo cp /opt/bigbluebutton-exporter/extras/systemd/bigbluebutton-exporter.service /lib/systemd/system/ sudo mkdir /etc/bigbluebutton-exporter sudo cp /opt/bigbluebutton-exporter/extras/systemd/bigbluebutton-exporter/* /etc/bigbluebutton-exporter 5. Edit settings and replace API_BASE_URL and API_SECRET # sudo nano /etc/bigbluebutton-exporter/settings.env # or using Vim sudo vim /etc/bigbluebutton-exporter/settings.env 6. Start the bigbluebutton-exporter service # sudo systemctl start bigbluebutton-exporter # optional - enable exporter to autostart when booting host sudo systemctl enable bigbluebutton-exporter 7. Setup Nginx as a TLS termination proxy # Follow steps 5 - 7 from the Docker installation instructions. 8. Configure Prometheus # Follow step 8 from the Docker installation instructions. Updates # To update the exporter all you need to do is issue a: cd /opt/bigbluebutton-exporter sudo git pull sudo git checkout <RELEASE TAG> sudo chown -R bbb-exporter:bbb-exporter /opt/bigbluebutton-exporter sudo systemctl restart bigbluebutton-exporter Check the repository releases to get the latest tag. It is recommended to watch the repository to be alerted when there is a new release available. Notes # Multiple BigBlueButton Servers # There are two ways of configuring Prometheus to scrape multiple BigBlueButton exporters, the primary difference between the two is that one supports having different HTTP Basic Auth usernames/passwords for each exporter and the other doesn't. 1. Extending Prometheus targets (Recommended) # Pro: Simple configuration Dashboards work out of the box Cons: All BigBlueButton exporters must have the same HTTP Basic Auth username/password Configuration steps # Configure a single BigBlueButton exporter Prometheus scrape job Configure the same HTTP Basic Auth username/password on all your Nginx TLS termination proxies (that act as a reverse proxy for your BigBlueButton exporter) Append all the hosts to the Prometheus' targets field Example scrape job, place this under scrape_configs in your Prometheus configuration: - job_name : 'bbb_node_exporter' metrics_path : '/node_exporter/metrics' params : format : [ prometheus ] honor_labels : true scheme : https basic_auth : username : <HTTP BASIC AUTH USERNAME> # TODO - change password : <HTTP BASIC AUTH PASSWORD> # TODO - change static_configs : # TODO - change, add all of your BigBlueButton exporter hosts - targets : [ 'bbb.example.com' , 'bbb2.example.com' , 'bbb3.example.com' ] 2. Separate job (Not recommended) # Pro: All BigBlueButton exporters can have different HTTP Basic Auth usernames/passwords Cons: More to configure Warning This has not been tested and some changes to the provided Grafana dashboards might be required (in the future)! Configuration steps # For each BigBlueButton exporter create a separate Prometheus scrape job Check to see if your Grafana dashboards are displaying all metrics correctly Here is an example of two job scrape configuration (for two different exporters). Place this under scrape_configs in your Prometheus configuration for each job (exporter): # TODO - change job_name, this has to be different for each job - job_name : 'bbb_node_exporter_1' metrics_path : '/node_exporter/metrics' params : format : [ prometheus ] honor_labels : true scheme : https basic_auth : username : <HTTP BASIC AUTH USERNAME> # TODO - change password : <HTTP BASIC AUTH PASSWORD> # TODO - change static_configs : - targets : [ 'bbb.example.com' ] # TODO - change # TODO - change job_name, this has to be different for each job - job_name : 'bbb_node_exporter_2' metrics_path : '/node_exporter/metrics' params : format : [ prometheus ] honor_labels : true scheme : https basic_auth : username : <HTTP BASIC AUTH USERNAME> # TODO - change password : <HTTP BASIC AUTH PASSWORD> # TODO - change static_configs : - targets : [ 'bbb2.example.com' ] # TODO - change","title":"BigBlueButton Exporter"},{"location":"installation/bigbluebutton_exporter/#installation-of-bigbluebutton-exporter","text":"Two installation methods are supported: Docker (recommended) Systemd (not recommended) We recommend Docker because it is easier to update, reproduce builds and comes with all dependencies pre-installed.","title":"Installation of BigBlueButton Exporter"},{"location":"installation/bigbluebutton_exporter/#docker-installation-recommended","text":"These instructions will guide you through the installation procedure for BigBlueButton Exporter on your BigBlueButton server and direct the HTTP basic auth protected endpoint /metrics/ to expose your BigBlueButtons server's metrics. We assume you have a working installation of BigBlueButton with Nginx as the reverse proxy already set up. Info HTTP Basic Auth is required because each request to the /metrics/ endpoint performs an API call to BigBlueButton which takes a couple of seconds. Prerequisite: Prometheus Docker docker-compose Working BigBlueButton server","title":"Docker Installation (Recommended)"},{"location":"installation/bigbluebutton_exporter/#1-create-directory","text":"mkdir ~/bbb-exporter","title":"1. Create directory"},{"location":"installation/bigbluebutton_exporter/#2-create-docker-compose-file","text":"Copy extras/docker-compose.exporter.yaml to your BigBlueButton server into ~/bbb-exporter/docker-compose.yaml . Make sure to replace the Docker image tag to the latest release . Note We assume you will be running the exporter on the BigBlueButton server where you have access to the recordings directory ( /var/bigbluebutton ). We need access to this directory so we can efficiently compute the metrics for recordings. You can still run the exporter on a different host by disabling the optimization but will lose certain metrics and increase scrape times. See details regarding the optimization . Tip Docker best practice: pin your docker image to a specific tag to have a reproducible environment. This also makes it easier to check which version you are running and which is the latest release.","title":"2. Create docker-compose file"},{"location":"installation/bigbluebutton_exporter/#3-create-secrets-file","text":"Take a note of your BigBlueButton's API base url and secret by running: bbb-conf --secret Then create the file ~/bbb-exporter/secrets.env and fill out the API_BASE_URL and API_SECRET variables with your details. API_BASE_URL=https://example.com/bigbluebutton/api/ API_SECRET=<secret> Warning The API base url ends with /api/ (beware of the trailing slash!). bbb-conf --secret will return the base url but not the base API url which has a /api/ appended.","title":"3. Create secrets file"},{"location":"installation/bigbluebutton_exporter/#4-start-the-container","text":"sudo docker-compose up -d The exporter should be running now. However you will not be able to access it externally because the docker-compose file binded the exporters port only to localhost. This is because we will use Nginx to act as a TLS termination proxy (reverse proxy with HTTPS support)","title":"4. Start the container"},{"location":"installation/bigbluebutton_exporter/#5-create-http-basic-auth-password","text":"Info For this you will need the handy apache2-utils package to create a password that will be used with HTTP basic auth by Nginx. You can install it (on Ubuntu) by running: sudo apt-get install apache2-utils . Create a username (e.g. metrics) and password. You will be prompted after you run the htpasswd command for the desired password. # You may replace metrics with any desired username sudo htpasswd -c /etc/nginx/.htpasswd metrics Warning If you already have /etc/nginx/.htpasswd file then do not add the -c flag, otherwise you will overwrite the file.","title":"5. Create HTTP basic auth password"},{"location":"installation/bigbluebutton_exporter/#6-add-nginx-site-configuration","text":"Add the location directive to your Nginx web server ( /etc/nginx/sites-available/bigbluebutton ) that will proxy traffic to 127.0.0.1:9688 . # BigBlueButton Exporter (metrics) location /metrics/ { auth_basic \"BigBlueButton Exporter\"; auth_basic_user_file /etc/nginx/.htpasswd; proxy_pass http://127.0.0.1:9688/; include proxy_params; } Tip When upgrading BigBlueButton (using the script), the upgrade procedure will overwrite the contents of /etc/nginx/sites-available/bigbluebutton thereby causing you to lose access to your metrics. So after the upgrade you will need to add the location directive again. You could also add a separate site configuration, but this will require you to point another domain to the server, configure virtual hosting and acquire a separate HTTPS certificate.","title":"6. Add Nginx site configuration"},{"location":"installation/bigbluebutton_exporter/#7-reload-nginx-and-test","text":"First check if your Nginx configuration is syntactically valid: sudo nginx -t If everything is okay reload Nginx: sudo systemctl reload nginx Now you can try accessing the metrics on /metrics and typing in your username/password that you choose in 5. Create HTTP basic auth password You should get the raw metrics in the Prometheus format.","title":"7. Reload Nginx and test"},{"location":"installation/bigbluebutton_exporter/#8-add-the-exporter-to-your-prometheus-configuration","text":"Now all that is left is to point your Prometheus to the exporter. In your prometheus.yaml configuration add a new job specifying the target (url of the exporter) and HTTP basic auth credentials. Replace example.com with your BigBlueButton's domain. - job_name: 'bbb' scrape_interval: 5s scheme: https basic_auth: username: \"<HTTP BASIC AUTH USERNAME>\" password: \"<HTTP BASIC AUTH PASSWORD>\" static_configs: - targets: ['example.com'] Tip You can scrape multiple exporters using a single job rule if they all have the same HTTP basic auth username/password in the Nginx termination proxy. See Multiple BigBlueButton Servers for details.","title":"8. Add the exporter to your Prometheus configuration"},{"location":"installation/bigbluebutton_exporter/#updates","text":"To update your BigBlueButton exporter all you have to do is change the docker image tag to the latest release (see releases or Docker image tags ) in ~/bbb-exporter/docker-compose.yaml and re-create the docker container by running: cd ~/bbb-exporter docker-compose up -d Since the container doesn't store anything it is safe to destroy the container. We recommend you \"watch\" on GitHub the projects repository to be notified on new releases. This way you will be always notified when a new update for BigBlueButton Exporter is available.","title":"Updates"},{"location":"installation/bigbluebutton_exporter/#systemd-installation-not-recommended","text":"This is an alternative installation guide that does not require docker and installs the exporter as a Systemd unit. After the guide you will have: BigBlueButton Exporter installed system wide and you will be able to use systemctl to start/stop/restart the exporter Nginx as a TLS termination proxy for the exporter Installation should be on the BigBlueButton server, although it is possible to install it on a secondary machine, but this will require you to install Nginx and set it up by yourself.","title":"Systemd Installation (Not recommended)"},{"location":"installation/bigbluebutton_exporter/#1-install-python-3-pip","text":"sudo apt install python3-pip","title":"1. Install Python 3 pip"},{"location":"installation/bigbluebutton_exporter/#2-download-the-source-code-and-install-dependencies","text":"cd /opt sudo git clone https://github.com/greenstatic/bigbluebutton-exporter.git cd bigbluebutton-exporter/ # It is recommended to checkout a release tag instead of using the master branch. # We recommend selecting the latest release tag from: # https://github.com/greenstatic/bigbluebutton-exporter/releases sudo git checkout <RELEASE TAG> sudo pip3 install -r requirements.txt # will install the Python dependencies system-wide","title":"2. Download the source code and install dependencies"},{"location":"installation/bigbluebutton_exporter/#3-create-a-non-privileged-user-for-the-exporter","text":"sudo useradd -r -d /opt/bigbluebutton-exporter -s /usr/sbin/nologin bbb-exporter sudo chown -R bbb-exporter:bbb-exporter /opt/bigbluebutton-exporter","title":"3. Create a non-privileged user for the exporter"},{"location":"installation/bigbluebutton_exporter/#4-copy-systemd-unit-service-and-example-settings","text":"sudo cp /opt/bigbluebutton-exporter/extras/systemd/bigbluebutton-exporter.service /lib/systemd/system/ sudo mkdir /etc/bigbluebutton-exporter sudo cp /opt/bigbluebutton-exporter/extras/systemd/bigbluebutton-exporter/* /etc/bigbluebutton-exporter","title":"4. Copy Systemd unit service and example settings"},{"location":"installation/bigbluebutton_exporter/#5-edit-settings-and-replace-api_base_url-and-api_secret","text":"sudo nano /etc/bigbluebutton-exporter/settings.env # or using Vim sudo vim /etc/bigbluebutton-exporter/settings.env","title":"5. Edit settings and replace API_BASE_URL and API_SECRET"},{"location":"installation/bigbluebutton_exporter/#6-start-the-bigbluebutton-exporter-service","text":"sudo systemctl start bigbluebutton-exporter # optional - enable exporter to autostart when booting host sudo systemctl enable bigbluebutton-exporter","title":"6. Start the bigbluebutton-exporter service"},{"location":"installation/bigbluebutton_exporter/#7-setup-nginx-as-a-tls-termination-proxy","text":"Follow steps 5 - 7 from the Docker installation instructions.","title":"7. Setup Nginx as a TLS termination proxy"},{"location":"installation/bigbluebutton_exporter/#8-configure-prometheus","text":"Follow step 8 from the Docker installation instructions.","title":"8. Configure Prometheus"},{"location":"installation/bigbluebutton_exporter/#updates_1","text":"To update the exporter all you need to do is issue a: cd /opt/bigbluebutton-exporter sudo git pull sudo git checkout <RELEASE TAG> sudo chown -R bbb-exporter:bbb-exporter /opt/bigbluebutton-exporter sudo systemctl restart bigbluebutton-exporter Check the repository releases to get the latest tag. It is recommended to watch the repository to be alerted when there is a new release available.","title":"Updates"},{"location":"installation/bigbluebutton_exporter/#notes","text":"","title":"Notes"},{"location":"installation/bigbluebutton_exporter/#multiple-bigbluebutton-servers","text":"There are two ways of configuring Prometheus to scrape multiple BigBlueButton exporters, the primary difference between the two is that one supports having different HTTP Basic Auth usernames/passwords for each exporter and the other doesn't.","title":"Multiple BigBlueButton Servers"},{"location":"installation/bigbluebutton_exporter/#1-extending-prometheus-targets-recommended","text":"Pro: Simple configuration Dashboards work out of the box Cons: All BigBlueButton exporters must have the same HTTP Basic Auth username/password","title":"1. Extending Prometheus targets (Recommended)"},{"location":"installation/bigbluebutton_exporter/#configuration-steps","text":"Configure a single BigBlueButton exporter Prometheus scrape job Configure the same HTTP Basic Auth username/password on all your Nginx TLS termination proxies (that act as a reverse proxy for your BigBlueButton exporter) Append all the hosts to the Prometheus' targets field Example scrape job, place this under scrape_configs in your Prometheus configuration: - job_name : 'bbb_node_exporter' metrics_path : '/node_exporter/metrics' params : format : [ prometheus ] honor_labels : true scheme : https basic_auth : username : <HTTP BASIC AUTH USERNAME> # TODO - change password : <HTTP BASIC AUTH PASSWORD> # TODO - change static_configs : # TODO - change, add all of your BigBlueButton exporter hosts - targets : [ 'bbb.example.com' , 'bbb2.example.com' , 'bbb3.example.com' ]","title":"Configuration steps"},{"location":"installation/bigbluebutton_exporter/#2-separate-job-not-recommended","text":"Pro: All BigBlueButton exporters can have different HTTP Basic Auth usernames/passwords Cons: More to configure Warning This has not been tested and some changes to the provided Grafana dashboards might be required (in the future)!","title":"2. Separate job (Not recommended)"},{"location":"installation/bigbluebutton_exporter/#configuration-steps_1","text":"For each BigBlueButton exporter create a separate Prometheus scrape job Check to see if your Grafana dashboards are displaying all metrics correctly Here is an example of two job scrape configuration (for two different exporters). Place this under scrape_configs in your Prometheus configuration for each job (exporter): # TODO - change job_name, this has to be different for each job - job_name : 'bbb_node_exporter_1' metrics_path : '/node_exporter/metrics' params : format : [ prometheus ] honor_labels : true scheme : https basic_auth : username : <HTTP BASIC AUTH USERNAME> # TODO - change password : <HTTP BASIC AUTH PASSWORD> # TODO - change static_configs : - targets : [ 'bbb.example.com' ] # TODO - change # TODO - change job_name, this has to be different for each job - job_name : 'bbb_node_exporter_2' metrics_path : '/node_exporter/metrics' params : format : [ prometheus ] honor_labels : true scheme : https basic_auth : username : <HTTP BASIC AUTH USERNAME> # TODO - change password : <HTTP BASIC AUTH PASSWORD> # TODO - change static_configs : - targets : [ 'bbb2.example.com' ] # TODO - change","title":"Configuration steps"},{"location":"installation/netdata/","text":"Netdata # Follow these instructions in order to view system resource utilization with the server_instace_netdata.yaml Grafana dashboard. Instructions bellow will configure Netdata to bind to localhost and configure Nginx as a reverse proxy that will expose Netdata via a location directive with HTTP basic auth. Step-by-step Guide # This guide is built upon https://docs.netdata.cloud/backends/prometheus/ . 1. Install Netdata # Follow Netdata's official instruction on how to install Netdata: https://docs.netdata.cloud/packaging/installer/ . 2. Configure Netdata to bind to localhost # Find the [web] section and make sure bind to = 127.0.0.1 . cd /etc/netdata sudo ./edit-config netdata.conf 3. Create HTTP basic auth password # Info For this you will need the handy apache2-utils package to create a password that will be used with HTTP basic auth by Nginx. You can install it (on Ubuntu) by running: sudo apt install apache2-utils . Create a username (e.g. monitoring) and password. You will be prompted after you run the htpasswd command for the desired password. Tip The username and password combo doesn't need to be the same as the one for the exporter. # You may replace monitoring with any desired username # add `-c` flag to create the file if it doesn't exist sudo htpasswd /etc/nginx/.htpasswd monitoring 4. Add Nginx site configuration # Add the location directive to your Nginx web server ( /etc/nginx/sites-available/bigbluebutton ) that will proxy traffic to 127.0.0.1:19999 . # Netdata metrics location /netdata/ { auth_basic \"Netdata Monitoring\"; auth_basic_user_file /etc/nginx/.htpasswd; proxy_pass http://127.0.0.1:19999/; include proxy_params; } 5. Add Netdata to your Prometheus scrape jobs # Add the following job to your Prometheus configuration. Replace example.com with your BigBlueButton's domain. - job_name : 'bbb_netdata' metrics_path : '/netdata/api/v1/allmetrics' params : format : [ prometheus ] honor_labels : true scheme : https basic_auth : username : \"<HTTP BASIC AUTH USERNAME>\" password : \"<HTTP BASIC AUTH PASSWORD>\" static_configs : - targets : [ 'example.com' ] 6. Import the dashboard to your Grafana # Log into your Grafana web interface, click on + -> Import and select Upload .json file . Select the file extras/dashboards/server_instance_netdata.json from the repository (clone the repository or copy the contents of the file). Notes # Multiple BigBlueButton servers # If you wish to monitor multiple BigBlueButton servers simply do steps 1-4 for each server and then add each server's domain to the targets field in Prometheuses bbb_netdata job configuration. Setup Netdata without the Nginx reverse proxy # In the case you do not wish to deploy your Netdata behind the Nginx reverse proxy, you either need to fix the Server Instance Grafana Dashboard (not recommended) or add a Prometheus relabel config. Thank you to @robbi5 for providing this snippet: relabel_configs : - source_labels : [ '__address__' ] separator : ':' regex : '(.*):.*' target_label : 'instance' replacement : '$1' See issue #3 for more details.","title":"Netdata"},{"location":"installation/netdata/#netdata","text":"Follow these instructions in order to view system resource utilization with the server_instace_netdata.yaml Grafana dashboard. Instructions bellow will configure Netdata to bind to localhost and configure Nginx as a reverse proxy that will expose Netdata via a location directive with HTTP basic auth.","title":"Netdata"},{"location":"installation/netdata/#step-by-step-guide","text":"This guide is built upon https://docs.netdata.cloud/backends/prometheus/ .","title":"Step-by-step Guide"},{"location":"installation/netdata/#1-install-netdata","text":"Follow Netdata's official instruction on how to install Netdata: https://docs.netdata.cloud/packaging/installer/ .","title":"1. Install Netdata"},{"location":"installation/netdata/#2-configure-netdata-to-bind-to-localhost","text":"Find the [web] section and make sure bind to = 127.0.0.1 . cd /etc/netdata sudo ./edit-config netdata.conf","title":"2. Configure Netdata to bind to localhost"},{"location":"installation/netdata/#3-create-http-basic-auth-password","text":"Info For this you will need the handy apache2-utils package to create a password that will be used with HTTP basic auth by Nginx. You can install it (on Ubuntu) by running: sudo apt install apache2-utils . Create a username (e.g. monitoring) and password. You will be prompted after you run the htpasswd command for the desired password. Tip The username and password combo doesn't need to be the same as the one for the exporter. # You may replace monitoring with any desired username # add `-c` flag to create the file if it doesn't exist sudo htpasswd /etc/nginx/.htpasswd monitoring","title":"3. Create HTTP basic auth password"},{"location":"installation/netdata/#4-add-nginx-site-configuration","text":"Add the location directive to your Nginx web server ( /etc/nginx/sites-available/bigbluebutton ) that will proxy traffic to 127.0.0.1:19999 . # Netdata metrics location /netdata/ { auth_basic \"Netdata Monitoring\"; auth_basic_user_file /etc/nginx/.htpasswd; proxy_pass http://127.0.0.1:19999/; include proxy_params; }","title":"4. Add Nginx site configuration"},{"location":"installation/netdata/#5-add-netdata-to-your-prometheus-scrape-jobs","text":"Add the following job to your Prometheus configuration. Replace example.com with your BigBlueButton's domain. - job_name : 'bbb_netdata' metrics_path : '/netdata/api/v1/allmetrics' params : format : [ prometheus ] honor_labels : true scheme : https basic_auth : username : \"<HTTP BASIC AUTH USERNAME>\" password : \"<HTTP BASIC AUTH PASSWORD>\" static_configs : - targets : [ 'example.com' ]","title":"5. Add Netdata to your Prometheus scrape jobs"},{"location":"installation/netdata/#6-import-the-dashboard-to-your-grafana","text":"Log into your Grafana web interface, click on + -> Import and select Upload .json file . Select the file extras/dashboards/server_instance_netdata.json from the repository (clone the repository or copy the contents of the file).","title":"6. Import the dashboard to your Grafana"},{"location":"installation/netdata/#notes","text":"","title":"Notes"},{"location":"installation/netdata/#multiple-bigbluebutton-servers","text":"If you wish to monitor multiple BigBlueButton servers simply do steps 1-4 for each server and then add each server's domain to the targets field in Prometheuses bbb_netdata job configuration.","title":"Multiple BigBlueButton servers"},{"location":"installation/netdata/#setup-netdata-without-the-nginx-reverse-proxy","text":"In the case you do not wish to deploy your Netdata behind the Nginx reverse proxy, you either need to fix the Server Instance Grafana Dashboard (not recommended) or add a Prometheus relabel config. Thank you to @robbi5 for providing this snippet: relabel_configs : - source_labels : [ '__address__' ] separator : ':' regex : '(.*):.*' target_label : 'instance' replacement : '$1' See issue #3 for more details.","title":"Setup Netdata without the Nginx reverse proxy"},{"location":"installation/node_exporter/","text":"node_exporter # Follow these instructions in order to view system resource utilization with the extras/dashboards/server_instace_node_exporter.json Grafana dashboard. Instructions bellow will configure node_exporter to bind to localhost and configure Nginx as a reverse proxy that will expose node_exporter via a location directive with HTTP basic auth. Step-by-step Guide # node_exporter should be installed on your BigBlueButton server in order to expose system metrics for your Grafan dashboards. 1. Copy extras/node_exporter # git clone https://github.com/greenstatic/bigbluebutton-exporter.git cp -r bigbluebutton-exporter/extras/node_exporter ~/ Tip Always check for the latest stable docker image tag (for the docker-compose.yaml file). 2. Start using docker-compose # cd ~/node_exporter sudo docker-compose up -d 3. Create HTTP basic auth password # Info For this you will need the handy apache2-utils package to create a password that will be used with HTTP basic auth by Nginx. You can install it (on Ubuntu) by running: sudo apt install apache2-utils . Create a username (e.g. monitoring) and password. You will be prompted after you run the htpasswd command for the desired password. Tip The username and password combo doesn't need to be the same as the one for the exporter. # You may replace monitoring with any desired username # add `-c` flag to create the file if it doesn't exist sudo htpasswd /etc/nginx/.htpasswd monitoring 4. Add Nginx site configuration # Add the location directive to your Nginx web server ( /etc/nginx/sites-available/bigbluebutton ) that will proxy traffic to 127.0.0.1:9100 . # node_exporter metrics location /node_exporter/ { auth_basic \"node_exporter\"; auth_basic_user_file /etc/nginx/.htpasswd; proxy_pass http://127.0.0.1:9100/; include proxy_params; } 5. Add node_exporter to your Prometheus scrape jobs # Add the following job to your Prometheus configuration. Replace example.com with your BigBlueButton's domain. - job_name : 'bbb_node_exporter' metrics_path : '/node_exporter/metrics' params : format : [ prometheus ] honor_labels : true scheme : https basic_auth : username : \"<HTTP BASIC AUTH USERNAME>\" password : \"<HTTP BASIC AUTH PASSWORD>\" static_configs : - targets : [ 'example.com' ] 6. Import the dashboard to your Grafana # Log into your Grafana web interface, click on + -> Import and select Upload .json file . Select the file extras/dashboards/server_instance_node_exporter.json from the repository (clone the repository or copy the contents of the file). Notes # Multiple BigBlueButton servers # If you wish to monitor multiple BigBlueButton servers simply do steps 1-4 for each server and then add each server's domain to the targets field in Prometheuses bbb_node_exporter job configuration.","title":"node_exporter"},{"location":"installation/node_exporter/#node_exporter","text":"Follow these instructions in order to view system resource utilization with the extras/dashboards/server_instace_node_exporter.json Grafana dashboard. Instructions bellow will configure node_exporter to bind to localhost and configure Nginx as a reverse proxy that will expose node_exporter via a location directive with HTTP basic auth.","title":"node_exporter"},{"location":"installation/node_exporter/#step-by-step-guide","text":"node_exporter should be installed on your BigBlueButton server in order to expose system metrics for your Grafan dashboards.","title":"Step-by-step Guide"},{"location":"installation/node_exporter/#1-copy-extrasnode_exporter","text":"git clone https://github.com/greenstatic/bigbluebutton-exporter.git cp -r bigbluebutton-exporter/extras/node_exporter ~/ Tip Always check for the latest stable docker image tag (for the docker-compose.yaml file).","title":"1. Copy extras/node_exporter"},{"location":"installation/node_exporter/#2-start-using-docker-compose","text":"cd ~/node_exporter sudo docker-compose up -d","title":"2. Start using docker-compose"},{"location":"installation/node_exporter/#3-create-http-basic-auth-password","text":"Info For this you will need the handy apache2-utils package to create a password that will be used with HTTP basic auth by Nginx. You can install it (on Ubuntu) by running: sudo apt install apache2-utils . Create a username (e.g. monitoring) and password. You will be prompted after you run the htpasswd command for the desired password. Tip The username and password combo doesn't need to be the same as the one for the exporter. # You may replace monitoring with any desired username # add `-c` flag to create the file if it doesn't exist sudo htpasswd /etc/nginx/.htpasswd monitoring","title":"3. Create HTTP basic auth password"},{"location":"installation/node_exporter/#4-add-nginx-site-configuration","text":"Add the location directive to your Nginx web server ( /etc/nginx/sites-available/bigbluebutton ) that will proxy traffic to 127.0.0.1:9100 . # node_exporter metrics location /node_exporter/ { auth_basic \"node_exporter\"; auth_basic_user_file /etc/nginx/.htpasswd; proxy_pass http://127.0.0.1:9100/; include proxy_params; }","title":"4. Add Nginx site configuration"},{"location":"installation/node_exporter/#5-add-node_exporter-to-your-prometheus-scrape-jobs","text":"Add the following job to your Prometheus configuration. Replace example.com with your BigBlueButton's domain. - job_name : 'bbb_node_exporter' metrics_path : '/node_exporter/metrics' params : format : [ prometheus ] honor_labels : true scheme : https basic_auth : username : \"<HTTP BASIC AUTH USERNAME>\" password : \"<HTTP BASIC AUTH PASSWORD>\" static_configs : - targets : [ 'example.com' ]","title":"5. Add node_exporter to your Prometheus scrape jobs"},{"location":"installation/node_exporter/#6-import-the-dashboard-to-your-grafana","text":"Log into your Grafana web interface, click on + -> Import and select Upload .json file . Select the file extras/dashboards/server_instance_node_exporter.json from the repository (clone the repository or copy the contents of the file).","title":"6. Import the dashboard to your Grafana"},{"location":"installation/node_exporter/#notes","text":"","title":"Notes"},{"location":"installation/node_exporter/#multiple-bigbluebutton-servers","text":"If you wish to monitor multiple BigBlueButton servers simply do steps 1-4 for each server and then add each server's domain to the targets field in Prometheuses bbb_node_exporter job configuration.","title":"Multiple BigBlueButton servers"}]}